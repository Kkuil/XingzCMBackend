<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.kkuily.xingbackend.mapper.ArticleMapper">

    <sql id="Base_Column_List">
        id,userId,title,
        content,statusId,
        cover,isDeleted,
        createdTime,modifiedTime
    </sql>

    <resultMap id="BaseResultMap" type="top.kkuily.xingbackend.model.po.Article">
        <id property="id" column="id" jdbcType="VARCHAR"/>
        <result property="userId" column="userId" jdbcType="VARCHAR"/>
        <result property="title" column="title" jdbcType="VARCHAR"/>
        <result property="content" column="content" jdbcType="VARCHAR"/>
        <result property="statusId" column="statusId" jdbcType="INTEGER"/>
        <result property="cover" column="cover" jdbcType="VARCHAR"/>
        <result property="isDeleted" column="isDeleted" jdbcType="OTHER"/>
        <result property="createdTime" column="createdTime" jdbcType="TIMESTAMP"/>
        <result property="modifiedTime" column="modifiedTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!--管理员分页查询的每篇文章信息-->
    <resultMap id="ArticleInfoMapWithAdmin"
               type="top.kkuily.xingbackend.model.dto.response.article.admin.ArticleInfoResWithAdminDTO">
        <id property="id" column="id" jdbcType="VARCHAR"/>
        <result property="username" column="username" jdbcType="VARCHAR"/>
        <result property="title" column="title" jdbcType="VARCHAR"/>
        <result property="content" column="content" jdbcType="VARCHAR"/>
        <result property="categoryIds" column="categoryIds" jdbcType="INTEGER"/>
        <result property="tagIds" column="tagIds" jdbcType="INTEGER"/>
        <result property="statusId" column="statusId" jdbcType="INTEGER"/>
        <result property="cover" column="cover" jdbcType="VARCHAR"/>
        <result property="likedCount" column="likedCount" jdbcType="INTEGER"/>
        <result property="collectedCount" column="collectedCount" jdbcType="INTEGER"/>
        <result property="createdTime" column="createdTime" jdbcType="TIMESTAMP"/>
        <result property="modifiedTime" column="modifiedTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!--管理员带分页的查询根语句-->
    <sql id="ArticleListWithLimitBaseQuery">
        SELECT a.id,
               a.userId,
               u.username,
               a.title,
               a.content,
               a.statusId,
               a.cover,
               a.createdTime,
               article_liked_temp.likedCount,
               article_collected_temp.collectedCount,
               article_comment_temp.commentCount
        FROM article a
                 JOIN article_status ON a.statusId = article_status.id
                 JOIN user u ON a.userId = u.id
                 LEFT JOIN (SELECT ua.articleId, COUNT(*) AS likedCount
                            FROM user_article AS ua
                            WHERE ua.type = 1
                            GROUP BY ua.articleId) AS article_liked_temp ON a.id = article_liked_temp.articleId
                 LEFT JOIN (SELECT ua.articleId, COUNT(*) AS collectedCount
                            FROM user_article AS ua
                            WHERE ua.type = 3
                            GROUP BY ua.articleId) AS article_collected_temp ON a.id = article_collected_temp.articleId
                 LEFT JOIN (SELECT acom.articleId, COUNT(*) AS commentCount
                            FROM article_comment AS acom
                            GROUP BY acom.articleId) AS article_comment_temp ON a.id = article_comment_temp.articleId
                 LEFT JOIN article_tag atr ON a.id = atr.id
                 LEFT JOIN article_category acr ON a.id = acr.id
        WHERE (atr.tagId = #{tagId} OR #{tagId} IS NULL)
          AND (acr.categoryId = #{categoryId} OR #{categoryId} IS NULL)
        LIMIT ${(current - 1) * pageSize}, #{pageSize}
    </sql>

    <!--管理员不带分页的查询根语句-->
    <sql id="ArticleListWithNotLimitBaseQuery">
        SELECT COUNT(*)
        FROM article a
                 JOIN article_status ON a.statusId = article_status.id
                 JOIN user u ON a.userId = u.id
                 LEFT JOIN article_tag atr ON a.id = atr.id
                 LEFT JOIN article_category acr ON a.id = acr.id
        WHERE (atr.tagId = #{tagId} OR #{tagId} IS NULL)
          AND (acr.categoryId = #{categoryId} OR #{categoryId} IS NULL)
    </sql>

    <!--管理员带分页的查询语句-->
    <select id="listArticlesWithLimit" resultMap="ArticleInfoMapWithAdmin">
        <include refid="ArticleListWithLimitBaseQuery"/>

        <where>
            <if test="params.userId != null and params.userId != ''">
                AND a.userId LIKE CONCAT("%", #{params.userId}, "%")
            </if>
            <if test="params.username != null and params.username != ''">
                AND u.username LIKE CONCAT("%", #{params.username}, "%")
            </if>
            <if test="params.title != null and params.title != ''">
                AND a.title LIKE CONCAT("%", #{params.title}, "%")
            </if>
            <if test="params.content != null and params.content != ''">
                AND a.content LIKE CONCAT("%", #{params.content}, "%")
            </if>

            <if test="filter.statusIds != null">
                AND a.statusId IN
                <foreach item="statusId" index="index" collection="filter.statusIds" open="(" separator="," close=")">
                    #{statusId}
                </foreach>
            </if>

            <if test="params.createdTime != null">
                AND a.createdTime BETWEEN #{params.createdTime.startTime} AND #{params.createdTime.endTime}
            </if>
            <if test="params.modifiedTime != null">
                AND a.modifiedTime BETWEEN #{params.modifiedTime.startTime} AND #{params.modifiedTime.endTime}
            </if>
        </where>
        <if test="sort.createdTime != null">
            ORDER BY a.createdTime
            <choose>
                <when test="'ascend'.equals(sort.createdTime)">
                    ASC
                </when>
                <otherwise>
                    DESC
                </otherwise>
            </choose>
        </if>
        <if test="sort.modifiedTime != null">
            ORDER BY a.modifiedTime
            <choose>
                <when test="'ascend'.equals(sort.modifiedTime)">
                    ASC
                </when>
                <otherwise>
                    DESC
                </otherwise>
            </choose>
        </if>
        LIMIT #{page.current}, #{page.pageSize}
    </select>

    <!--管理员带分页的查询语句-->
    <select id="listArticlesWithNotLimit" resultType="java.lang.Integer">
        <include refid="ArticleListWithNotLimitBaseQuery"/>

        <where>
            <if test="params.userId != null and params.userId != ''">
                AND a.userId LIKE CONCAT("%", #{params.userId}, "%")
            </if>
            <if test="params.username != null and params.username != ''">
                AND u.username LIKE CONCAT("%", #{params.username}, "%")
            </if>
            <if test="params.title != null and params.title != ''">
                AND a.title LIKE CONCAT("%", #{params.title}, "%")
            </if>
            <if test="params.content != null and params.content != ''">
                AND a.content LIKE CONCAT("%", #{params.content}, "%")
            </if>

            <if test="filter.statusIds != null">
                AND a.statusId IN
                <foreach item="statusId" index="index" collection="filter.statusIds" open="(" separator="," close=")">
                    #{statusId}
                </foreach>
            </if>


            <if test="params.createdTime != null">
                AND a.createdTime BETWEEN #{params.createdTime.startTime} AND #{params.createdTime.endTime}
            </if>
            <if test="params.modifiedTime != null">
                AND a.modifiedTime BETWEEN #{params.modifiedTime.startTime} AND #{params.modifiedTime.endTime}
            </if>
        </where>
        <if test="sort.createdTime != null">
            ORDER BY a.createdTime
            <choose>
                <when test="'ascend'.equals(sort.createdTime)">
                    ASC
                </when>
                <otherwise>
                    DESC
                </otherwise>
            </choose>
        </if>
        <if test="sort.modifiedTime != null">
            ORDER BY a.modifiedTime
            <choose>
                <when test="'ascend'.equals(sort.modifiedTime)">
                    ASC
                </when>
                <otherwise>
                    DESC
                </otherwise>
            </choose>
        </if>
    </select>

    <!-- ============================================================ -->

    <!--用户带分页的查询根语句-->
    <sql id="ArticleListWithLimitAndUserBaseQuery">
        SELECT a.id,
               a.userId,
               u.username,
               a.title,
               a.content,
               a.statusId,
               a.cover,
               a.createdTime,
               article_liked_temp.likedCount,
               article_collected_temp.collectedCount,
               article_comment_temp.commentCount,
               CASE WHEN user_liked_article.articleId IS NOT NULL THEN true ELSE false END     AS isLiked,
               CASE WHEN user_collected_article.articleId IS NOT NULL THEN true ELSE false END AS isCollected,
               CASE WHEN user_visited_article.articleId IS NOT NULL THEN true ELSE false END   AS isVisited
        FROM article a
                 JOIN article_status ON a.statusId = article_status.id
                 JOIN user u ON a.userId = u.id
                 LEFT JOIN (SELECT ua.articleId, COUNT(*) AS likedCount
                            FROM user_article AS ua
                            WHERE ua.type = 1
                            GROUP BY ua.articleId) AS article_liked_temp ON a.id = article_liked_temp.articleId
                 LEFT JOIN (SELECT ua.articleId, COUNT(*) AS collectedCount
                            FROM user_article AS ua
                            WHERE ua.type = 3
                            GROUP BY ua.articleId) AS article_collected_temp ON a.id = article_collected_temp.articleId
                 LEFT JOIN (SELECT acom.articleId, COUNT(*) AS commentCount
                            FROM article_comment AS acom
                            GROUP BY acom.articleId) AS article_comment_temp ON a.id = article_comment_temp.articleId
                 LEFT JOIN article_tag atr ON a.id = atr.id
                 LEFT JOIN article_category acr ON a.id = acr.id
                 LEFT JOIN (SELECT ua.articleId
                            FROM user_article AS ua
                            WHERE ua.type = 1
                              AND ua.id = #{userId}) AS user_liked_article ON a.id = user_liked_article.articleId
                 LEFT JOIN (SELECT ua.articleId
                            FROM user_article AS ua
                            WHERE ua.type = 3
                              AND ua.id = #{userId}) AS user_collected_article
                           ON a.id = user_collected_article.articleId
                 LEFT JOIN (SELECT ua.articleId
                            FROM user_article AS ua
                            WHERE ua.type = 5
                              AND ua.id = #{userId}) AS user_visited_article
                           ON a.id = user_visited_article.articleId
        WHERE (atr.tagId = #{tagId} OR #{tagId} IS NULL)
          AND (acr.categoryId = #{categoryId} OR #{categoryId} IS NULL)
        LIMIT ${(current - 1) * pageSize}, #{pageSize}
    </sql>

    <!--用户不带分页的查询根语句-->
    <sql id="ArticleListWithNotLimitAndUserBaseQuery">
        SELECT COUNT(*)
        FROM article a
                 JOIN article_status ON a.statusId = article_status.id
                 JOIN user u ON a.userId = u.id
                 LEFT JOIN article_tag atr ON a.id = atr.id
                 LEFT JOIN article_category acr ON a.id = acr.id
        WHERE (atr.tagId = #{tagId} OR #{tagId} IS NULL)
          AND (acr.categoryId = #{categoryId} OR #{categoryId} IS NULL)
    </sql>

    <!--用户分页查询的每篇文章信息-->
    <resultMap
            id="ArticleListWithLimitAndUserBaseQuery"
            type="top.kkuily.xingbackend.model.dto.response.article.user.ArticleInfoResWithUserDTO"
    >
        <id property="id" column="id" jdbcType="VARCHAR"/>
        <result property="userId" column="userId" jdbcType="VARCHAR"/>
        <result property="username" column="username" jdbcType="VARCHAR"/>
        <result property="title" column="title" jdbcType="VARCHAR"/>
        <result property="content" column="content" jdbcType="VARCHAR"/>
        <result property="cover" column="cover" jdbcType="VARCHAR"/>
        <result property="likedCount" column="likedCount" jdbcType="VARCHAR"/>
        <result property="collectedCount" column="collectedCount" jdbcType="VARCHAR"/>
        <result property="commentCount" column="commentCount" jdbcType="VARCHAR"/>
        <result property="isLiked" column="isLiked" jdbcType="BOOLEAN"/>
        <result property="isCollected" column="isCollected" jdbcType="BOOLEAN"/>
        <result property="isVisited" column="isVisited" jdbcType="BOOLEAN"/>
        <result property="createdTime" column="createdTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!--用户带分页的查询语句-->
    <select id="listArticlesWithLimitAndUser"
            resultType="top.kkuily.xingbackend.model.dto.response.article.user.ArticleInfoResWithUserDTO">
        <include refid="ArticleListWithLimitAndUserBaseQuery"/>

    </select>

    <!--用户带分页的查询语句-->
    <select id="listArticlesWithNotLimitAndUser"
            resultType="java.lang.Integer">
        <include refid="ArticleListWithNotLimitAndUserBaseQuery"/>

    </select>

    <!-- ============================================================ -->

    <!--用户带分页的查询根语句-->
    <sql id="ArticleListWithLimitAndUserIdBaseQuery">
        SELECT a.id,
               a.title,
               a.content,
               a.cover,
               a.createdTime,
               article_liked_temp.likedCount,
               article_collected_temp.collectedCount,
               article_comment_temp.commentCount
        FROM article a
                 JOIN user u ON a.userId = u.id
                 LEFT JOIN (SELECT ua.articleId, COUNT(*) AS likedCount
                            FROM user_article AS ua
                            WHERE ua.type = 1
                            GROUP BY ua.articleId) AS article_liked_temp ON a.id = article_liked_temp.articleId
                 LEFT JOIN (SELECT ua.articleId, COUNT(*) AS collectedCount
                            FROM user_article AS ua
                            WHERE ua.type = 3
                            GROUP BY ua.articleId) AS article_collected_temp ON a.id = article_collected_temp.articleId
                 LEFT JOIN (SELECT acom.articleId, COUNT(*) AS commentCount
                            FROM article_comment AS acom
                            GROUP BY acom.articleId) AS article_comment_temp ON a.id = article_comment_temp.articleId
        WHERE (a.statusId = #{statusId} OR #{statusId} IS NULL)
          AND (a.userId = #{userId} OR #{userId} IS NULL)
        LIMIT ${(current - 1) * pageSize}, #{pageSize}
    </sql>

    <!--用户不带分页的查询根语句-->
    <sql id="ArticleListWithNotLimitAndUserIdBaseQuery">
        SELECT COUNT(*)
        FROM article a
                 JOIN user u ON a.userId = u.id
        WHERE (a.statusId = #{statusId} OR #{statusId} IS NULL)
          AND (a.userId = #{userId} OR #{userId} IS NULL)
    </sql>

    <!--用户分页查询的每篇文章信息-->
    <resultMap id="ArticleListWithLimitAndUserIdBaseQuery"
               type="top.kkuily.xingbackend.model.dto.response.article.user.ArticleInfoResWithUserProfileDTO">
        <id property="id" column="id" jdbcType="VARCHAR"/>
        <result property="title" column="title" jdbcType="VARCHAR"/>
        <result property="content" column="content" jdbcType="VARCHAR"/>
        <result property="cover" column="cover" jdbcType="VARCHAR"/>
        <result property="likedCount" column="likedCount" jdbcType="VARCHAR"/>
        <result property="collectedCount" column="collectedCount" jdbcType="VARCHAR"/>
        <result property="commentCount" column="commentCount" jdbcType="VARCHAR"/>
        <result property="createdTime" column="createdTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!--用户带分页的查询语句-->
    <select id="listArticlesWithLimitAndUserId"
            resultType="top.kkuily.xingbackend.model.dto.response.article.user.ArticleInfoResWithUserDTO">
        <include refid="ArticleListWithLimitAndUserIdBaseQuery"/>

    </select>

    <!--用户不带分页的查询语句-->
    <select id="listArticlesWithNotLimitAndUserId"
            resultType="java.lang.Integer">
        <include refid="ArticleListWithNotLimitAndUserIdBaseQuery"/>

    </select>

    <!-- ============================================================ -->

    <!--用户查询文章详情根语句-->
    <sql id="ArticleDetailWithUserBaseQuery">
        SELECT a.id,
               a.title,
               a.content,
               a.cover,
               a.createdTime,
               a.modifiedTime,
               article_liked_temp.likedCount,
               article_collected_temp.collectedCount,
               CASE WHEN user_liked_article.articleId IS NOT NULL THEN true ELSE false END     AS isLiked,
               CASE WHEN user_collected_article.articleId IS NOT NULL THEN true ELSE false END AS isCollected
        FROM article a
                 JOIN article_status ON a.statusId = article_status.id
                 JOIN user u ON a.userId = u.id
                 LEFT JOIN (SELECT ua.articleId, COUNT(*) AS likedCount
                            FROM user_article AS ua
                            WHERE ua.type = 1
                            GROUP BY ua.articleId) AS article_liked_temp ON a.id = article_liked_temp.articleId
                 LEFT JOIN (SELECT ua.articleId, COUNT(*) AS collectedCount
                            FROM user_article AS ua
                            WHERE ua.type = 3
                            GROUP BY ua.articleId) AS article_collected_temp ON a.id = article_collected_temp.articleId
                 LEFT JOIN (SELECT ua.articleId
                            FROM user_article AS ua
                            WHERE ua.type = 1
                              AND ua.id = #{userId}) AS user_liked_article ON a.id = user_liked_article.articleId
                 LEFT JOIN (SELECT ua.articleId
                            FROM user_article AS ua
                            WHERE ua.type = 3
                              AND ua.id = #{userId}) AS user_collected_article
                           ON a.id = user_collected_article.articleId
        WHERE a.id = #{articleId}
    </sql>

    <!-- 用户查询文章详情中文章的详情 -->
    <select id="selectArticleDetailInfo"
            resultType="top.kkuily.xingbackend.model.vo.article.detail.ArticleDetailInfoVO">
        <include refid="ArticleDetailWithUserBaseQuery"/>

    </select>

    <!-- 用户查询文章详情中作者的详情 -->
    <select id="selectUserById" resultType="top.kkuily.xingbackend.model.vo.article.detail.AuthorDetailInfoVO">
        SELECT u.id,
               u.username,
               u.avatar,
               u.phone,
               u.birthday,
               u.gender,
               u.email,
               u.isVip
        FROM article AS a
                 JOIN user AS u ON a.userId = u.id
        WHERE a.id = #{articleId}
    </select>

</mapper>
