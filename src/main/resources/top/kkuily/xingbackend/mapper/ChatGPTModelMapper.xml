<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.kkuily.xingbackend.mapper.ChatGPTModelMapper">

    <resultMap id="BaseResultMap" type="top.kkuily.xingbackend.model.po.ChatGPTModel">
        <id property="id" column="id" jdbcType="VARCHAR"/>
        <result property="name" column="name" jdbcType="VARCHAR"/>
        <result property="cover" column="cover" jdbcType="VARCHAR"/>
        <result property="isDeleted" column="isDeleted" jdbcType="OTHER"/>
        <result property="createdTime" column="createdTime" jdbcType="TIMESTAMP"/>
        <result property="modifiedTime" column="modifiedTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap id="ChatGPTModelInfoMap" type="top.kkuily.xingbackend.model.dto.response.chat_gpt.ChatGPTModelInfoResDTO">
        <id property="id" column="id" jdbcType="VARCHAR"/>
        <result property="name" column="name" jdbcType="VARCHAR"/>
        <result property="cover" column="cover" jdbcType="VARCHAR"/>
        <result property="createdTime" column="createdTime" jdbcType="TIMESTAMP"/>
        <result property="modifiedTime" column="modifiedTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,name,cover,
        isDeleted,createdTime,modifiedTime
    </sql>

    <!-- Base query for paginated results -->
    <sql id="ChatGPTModelListWithLimitBaseQuery">
        SELECT c.id,
               c.name,
               c.cover,
               c.isDeleted,
               c.createdTime,
               c.modifiedTime
        FROM chatgpt_model c
    </sql>

    <!-- Base query for non-paginated results -->
    <sql id="ChatGPTModelListWithNotLimitBaseQuery">
        SELECT COUNT(*)
        FROM chatgpt_model c
    </sql>

    <!-- Query for paginated results -->
    <select id="listChatGPTModelsWithLimit" resultMap="ChatGPTModelInfoMap">
        <include refid="ChatGPTModelListWithLimitBaseQuery"/>

        <where>
            <if test="params.id != null and params.id != ''">
                AND c.id LIKE CONCAT("%", #{params.id}, "%")
            </if>
            <if test="params.name != null and params.name != ''">
                AND c.name LIKE CONCAT("%", #{params.name}, "%")
            </if>
            <if test="params.isDeleted != null">
                AND c.isDeleted = #{params.isDeleted}
            </if>

            <if test="params.createdTime != null">
                AND c.createdTime BETWEEN #{params.createdTime.startTime} AND #{params.createdTime.endTime}
            </if>
            <if test="params.modifiedTime != null">
                AND c.modifiedTime BETWEEN #{params.modifiedTime.startTime} AND #{params.modifiedTime.endTime}
            </if>
        </where>
        <if test="sort.createdTime != null">
            ORDER BY c.createdTime
            <choose>
                <when test="'ascend'.equals(sort.createdTime)">
                    ASC
                </when>
                <otherwise>
                    DESC
                </otherwise>
            </choose>
        </if>
        <if test="sort.modifiedTime != null">
            ORDER BY c.modifiedTime
            <choose>
                <when test="'ascend'.equals(sort.modifiedTime)">
                    ASC
                </when>
                <otherwise>
                    DESC
                </otherwise>
            </choose>
        </if>
        LIMIT #{page.current}, #{page.pageSize}
    </select>

    <!-- Query for non-paginated results -->
    <select id="listChatGPTModelsWithNotLimit" resultType="java.lang.Integer">
        <include refid="ChatGPTModelListWithNotLimitBaseQuery"/>

        <where>
            <if test="params.id != null and params.id != ''">
                AND c.id LIKE CONCAT("%", #{params.id}, "%")
            </if>
            <if test="params.name != null and params.name != ''">
                AND c.name LIKE CONCAT("%", #{params.name}, "%")
            </if>
            <if test="params.isDeleted != null">
                AND c.isDeleted = #{params.isDeleted}
            </if>

            <if test="params.createdTime != null">
                AND c.createdTime BETWEEN #{params.createdTime.startTime} AND #{params.createdTime.endTime}
            </if>
            <if test="params.modifiedTime != null">
                AND c.modifiedTime BETWEEN #{params.modifiedTime.startTime} AND #{params.modifiedTime.endTime}
            </if>
        </where>
        <if test="sort.createdTime != null">
            ORDER BY c.createdTime
            <choose>
                <when test="'ascend'.equals(sort.createdTime)">
                    ASC
                </when>
                <otherwise>
                    DESC
                </otherwise>
            </choose>
        </if>
        <if test="sort.modifiedTime != null">
            ORDER BY c.modifiedTime
            <choose>
                <when test="'ascend'.equals(sort.modifiedTime)">
                    ASC
                </when>
                <otherwise>
                    DESC
                </otherwise>
            </choose>
        </if>
    </select>
</mapper>
